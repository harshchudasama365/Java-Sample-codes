Day-1-JPA-Hibernate
-------------------------------------------------------
1.ORM
2.Hibernate
3.Drawbacks JDBC
4.ORM Tools
5.JPA-API-EntityManager,EntityManagerFactory,Persistence
5.persistence.xml---location Why?Where?How?
6.Hibernate+JPA
7.Hibernate Properties
8.JDBC-Connection Where?How?
9.Hands on - Lifecycle methods
-------------------------------------------------------------
Student s1 = new Student(); //s1 object inside heap memory area
s1.setName("Dear");
Student s2 = new Student();
s2.setName("Dear";
s1==s2;
------------------------------------------------------------
created only in the Heap
It is not created inside the Database
------------------------------------------------------------
JDBC----API //not supported to ORM
create table
writing queries
Database-Oracle
How s1 is stored in the database?
JPA-API
ORM - Object Relation Mapping : to remove the impedence mismatch
Granularity
Inheritance
Association
Identity 
------------------------------------------------------------
Drawbacks of JDBC
Complex code
Repetative code-Boilerplate code
code for getting the connection
writing the queries
SQL queries-Object model-not support to object model
insert the 100 rows : JDBC-failed - Student/Employee/Account
---------------------------------------------------------
JPA
ORM :What is purpose ?
1. to overcome the drawnbacks of the JDBC
2. To remove the impedence mismatch
-----------------------------------------------------------
JPA - Java Persistence API
It is just a specification : set of rules
ORM Tools - Hibernate,TopLink----
JPA - Director
Hibernate - Actor - Implentatio tool
Specification-Implementation
Interface-class
Account-Create/Type-Interface-AccountInterface-

Home-Map ----> Build Home
JPA-is a specification
Hibernate - is an implementation

Which package - JPA
javax.persistence

Configuration file : persistence.xml
Where it is located : src-> META-INF -> persistence.xml
Why? Persistence definition or define the Persistence Unit
Annotations definitions

Compulsory Annotations for JPA-Hibernate
@Entity
@Id
Other Annotations
@Table
@Column
------------------------------------------------------------
JPA-API : collection of interfaces and classes
----------------------------------------------------------
EntityManagerFactory — 
This is a factory class of EntityManager. 
It creates and manages multiple EntityManager instances.

EntityManager — It is an interface; 
it manages the persistence operations on objects. 
It works like a factory for Query instance.

Entity — Entities are the persistence objects, 
stored as records in the database.

EntityTransaction — It has one-to-one relationship with 
		EntityManager. 
                For each EntityManager, operations 
		are maintained by the EntityTransaction class.

	emanager.getTransaction().begin();
	emanager.getTransaction().commit();

Persistence — This class contains static methods to 
	      obtain the EntityManagerFactory instance.

Create
insert
drop
select

JPQL
Query - This interface is implemented by each JPA vendor 
	to obtain relational objects that meet the criteria.
------------------------------------------------------------
Properties:
show_sql : true ---> display sql ststement in console generated by hibernate
provider:-----> it specify which ORM tool we use Hibernate? TopLink?
dialect : ----> generate the sql syntaxes specific to database
hbm2dd.auto---->4options
	      create---> always create new table (old table+data dropped)
	      update---> use the existing table--just update the data on same table
	      create-drop---> testing env--->each time new table is create and drops it
	      validate---> only validates the existence of table--throws the exception  	 	 

---------------------------------------------------------------------------
LifeCycle of an Entity
persist()---to create/add/save the object to the database
find()--- to read the object/record from database BY PRIMARY KEY
merge()---to update the object/record to the database
remove()---to delete the object/record fro database
------------Transaction is most important--------------------









